---
# tasks file for postgres
- name: install postgres
  package:
    name: "{{ postgres_packages }}"
    state: present
  register: postgres_install_postgres
  until: postgres_install_postgres is succeeded
  retries: 3

- name: run initdb
  command: initdb -D "{{ postgres_dir }}"
  environment:
    PGDATA: /var/lib/pgsql/data
  args:
    creates: "{{ postgres_conf }}"
  become_user: postgres
  become: true

- name: configure postgres
  lineinfile:
    path: "{{ postgres_conf }}"
    regex: "^{{ item.name }} ="
    line: "{{ item.name }} = '{{ item.value }}'"
    create: yes
  with_items:
    - "{{ postgres_settings }}"
  when:
    - postgres_settings is defined
  notify:
    - restart postgres
  loop_control:
    label: "{{ item.name }}"

- name: create pg_hba.conf
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgres_dir }}/pg_hba.conf"
    backup: yes
  notify: reload postgres

- name: start and enable postgres
  service:
    name: "{{ postgres_service }}"
    state: started
    enabled: yes

- name: install psycopg2
  package:
    name: "{{ postgres_psycopg2 }}"
    state: present
  register: postgres_install_psycopg2
  until: postgres_install_psycopg2 is succeeded
  retries: 3
  when:
    - postgres_databases is defined or
      postgres_users is defined

- name: create postgres database
  postgresql_db:
    name: "{{ item.name }}"
    state: present
  with_items:
    - "{{ postgres_databases }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - postgres_databases is defined
  become_user: postgres
  become: true

- name: create postgres users
  postgresql_user:
    name: "{{ item.name }}"
    db: "{{ item.db | default(omit) }}"
    password: "{{ item.password }}"
    expires: "{{ item.expires | default(omit) }}"
  with_items:
    - "{{ postgres_users }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - postgres_users is defined
  become_user: postgres
  become: true
