---
# tasks file for postgres
- name: include assert.yml
  include_tasks: assert.yml

- name: install postgres
  package:
    name: "{{ postgres_packages }}"
    state: present
  register: postgres_install_postgres
  until: postgres_install_postgres is succeeded
  retries: 3

- name: create postgres data directory
  file:
    path: "{{ postgres_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: "700"

- name: initialize database
  command: initdb -D {{ postgres_dir }}
  args:
    creates: "{{ postgres_dir }}/PG_VERSION"
  when:
    - ansible_os_family != "Debian"
  become_user: postgres
  become: yes

- name: configure postgres
  lineinfile:
    path: "{{ postgres_conf_dir }}/postgresql.conf"
    regex: "^{{ item.name }} ="
    line: "{{ item.name }} = '{{ item.value }}'"
    create: yes
  loop:
     - name: port
       value: "{{ postgres_port }}"
     - name: listen_addresses
       value: "{{ postgres_listen_addresses }}"
     - name: unix_socket_directories
       value: "{{ postgres_unix_socket_directories }}"
     - name: max_wal_size
       value: "{{ postgres_max_wal_size }}"
     - name: min_wal_size
       value: "{{ postgres_min_wal_size }}"
     - name: log_timezone
       value: "{{ postgres_log_timezone }}"
     - name: datestyle
       value: "{{ postgres_datestyle }}"
     - name: timezone
       value: "{{ postgres_timezone }}"
     - name: default_text_search_config
       value: "{{ postgres_default_text_search_config }}"
  notify:
    - restart postgres
  loop_control:
    label: "{{ item.name }}"

- name: create pg_hba.conf
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgres_conf_dir }}/pg_hba.conf"
    backup: yes
  notify:
    - reload postgres

- name: start and enable postgres
  service:
    name: postgresql
    state: started
    enabled: yes

- name: install psycopg2-binary
  pip:
    name: psycopg2-binary
    state: present
  register: postgres_install_psycopg2_binary
  until: postgres_install_psycopg2_binary is succeeded
  retries: 3
  when:
    - postgres_databases is defined or
      postgres_users is defined

- name: flush handlers
  meta: flush_handlers

- name: create postgres database
  postgresql_db:
    name: "{{ item.name }}"
    state: present
  loop: "{{ postgres_databases }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - postgres_databases is defined
  become_user: postgres
  become: yes

- name: create postgres users
  postgresql_user:
    name: "{{ item.name }}"
    db: "{{ item.db | default(omit) }}"
    password: "{{ item.password }}"
    expires: "{{ item.expires | default(omit) }}"
  loop: "{{ postgres_users }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - postgres_users is defined
  become_user: postgres
  become: yes
